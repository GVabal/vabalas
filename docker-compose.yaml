services:
  # TODO try https://caddyserver.com/
  reverse-proxy:
    restart: always
    image: traefik:v3.2.0
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.8'
          memory: 7168m
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=vabalas@vabalas.my.id"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--entryPoints.websecure.address=:443"
      - "--entrypoints.webinsecure.address=:80"
      - "--entrypoints.webinsecure.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.webinsecure.http.redirections.entrypoint.scheme=https"
    #      - "--entrypoints.webinsecure.http.redirections.entrypoint.permanent=true"

  cadvisor:
    restart: always
    image: gcr.io/cadvisor/cadvisor:latest
    platform: linux/amd64/v3
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.8'
          memory: 7168m
    volumes:
    - type: bind
      source: /
      target: /rootfs
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/lib/docker/
      target: /var/lib/docker
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/run
      target: /var/run
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /sys
      target: /sys
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /dev/disk/
      target: /dev/disk
      read_only: true
      bind:
        propagation: rslave
    ports:
      - "8080:8080"

  elasticsearch:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.13
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1024m
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  logstash:
    depends_on:
      - elasticsearch
    restart: always
    image: docker.elastic.co/logstash/logstash:7.17.13
    deploy:
      resources:
        limits:
          memory: 512m
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "12201:12201/udp"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

  kibana:
    depends_on:
      - logstash
      - elasticsearch
    restart: always
    image: docker.elastic.co/kibana/kibana:7.17.13
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"

  backend:
    depends_on:
      - reverse-proxy
    restart: always
    image: backend:latest
    build: ./backend
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.8'
          memory: 7168m
    labels:
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=le"
      - "traefik.http.routers.backend.rule=Host(`vabalas.my.id`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.middlewares=cors"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=https://vabalas.my.id"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    environment:
      SPRING_PROFILES_ACTIVE: "prod"
      PORT: "8000"
    ports:
      - "8000:8000"

volumes:
  letsencrypt:
