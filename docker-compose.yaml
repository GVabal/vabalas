volumes:
  caddy_data:
  caddy_config:
  pg_data:
  es_data:
  kibana_data:
  logstash_data:
  certs:

services:
  backend:
    depends_on:
      postgres:
        condition: service_started
      logstash:
        condition: service_started
    restart: always
    image: backend:latest
    build: ./backend
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "8000:8000"
    environment:
      SPRING_PROFILES_ACTIVE: "prod"
      PORT: "8000"

  caddy:
    depends_on:
      - backend
    restart: unless-stopped
    image: caddy/caddy:latest
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"

  cadvisor:
    restart: always
    image: gcr.io/cadvisor/cadvisor:latest
    platform: linux/amd64/v3
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - type: bind
      source: /
      target: /rootfs
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/lib/docker/
      target: /var/lib/docker
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/run
      target: /var/run
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /sys
      target: /sys
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /dev/disk/
      target: /dev/disk
      read_only: true
      bind:
        propagation: rslave
    ports:
      - "8080:8080"

  es-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
             if [ x${ELASTIC_PASSWORD} == x ]; then
               echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
               exit 1;
             elif [ x${KIBANA_PASSWORD} == x ]; then
               echo "Set the KIBANA_PASSWORD environment variable in the .env file";
               exit 1;
             fi;
             if [ ! -f config/certs/ca.zip ]; then
               echo "Creating CA";
               bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
               unzip config/certs/ca.zip -d config/certs;
             fi;
             if [ ! -f config/certs/certs.zip ]; then
               echo "Creating certs";
               echo -ne \
               "instances:\n"\
               "  - name: es01\n"\
               "    dns:\n"\
               "      - es01\n"\
               "      - localhost\n"\
               "    ip:\n"\
               "      - 127.0.0.1\n"\
               "  - name: es02\n"\
               "    dns:\n"\
               "      - es02\n"\
               "      - localhost\n"\
               "    ip:\n"\
               "      - 127.0.0.1\n"\
               "  - name: es03\n"\
               "    dns:\n"\
               "      - es03\n"\
               "      - localhost\n"\
               "    ip:\n"\
               "      - 127.0.0.1\n"\
               "  - name: kibana\n"\
               "    dns:\n"\
               "      - kibana\n"\
               "      - localhost\n"\
               "    ip:\n"\
               "      - 127.0.0.1\n"\
               > config/certs/instances.yml;
               bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
               unzip config/certs/certs.zip -d config/certs;
             fi;
             echo "Setting file permissions"
             chown -R root:root config/certs;
             find . -type d -exec chmod 750 \{\} \;;
             find . -type f -exec chmod 640 \{\} \;;
             echo "Waiting for Elasticsearch availability";
             until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
             echo "Setting kibana_system password";
             until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
             echo "All done!";
           '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      es-setup:
        condition: service_healthy
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    labels:
      co.elastic.logs/module: elasticsearch
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1024m
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: always
    image: docker.elastic.co/kibana/kibana:8.16.0
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD:-changeme}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: "config/certs/ca/ca.crt"
      XPACK_SECURITY_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
      XPACK_REPORTING_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    restart: always
    image: docker.elastic.co/logstash/logstash:8.16.0
    labels:
      co.elastic.logs/module: logstash
    user: root
    deploy:
      resources:
        limits:
          memory: 512m
    volumes:
      - logstash_data:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044/udp"
    environment:
      NODE_NAME: "logstash"
      xpack.monitoring.enabled: false
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_USER: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
      ELASTIC_HOSTS: https://elasticsearch:9200
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf

  postgres:
    restart: always
    image: postgres:17
    environment:
      POSTGRES_DB: pgdb
      POSTGRES_USER: ${DB_USER:-sa}
      POSTGRES_PASSWORD: ${DB_PASS:-changeme}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
