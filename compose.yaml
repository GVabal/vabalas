volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  pg_data:
    driver: local
  logs:
    driver: local

networks:
  postgres_network:
    driver: bridge
  caddy_network:
    driver: bridge

services:
  backend:
    depends_on:
      postgres:
        condition: service_started
    restart: always
    image: backend:latest
    build: ./backend
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./logs/backend:/logs/backend
    ports:
      - "127.0.0.1:8000:8000"
    networks:
      - caddy_network
      - postgres_network
    environment:
      SPRING_PROFILES_ACTIVE: "prod"
      PORT: "8000"
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}

#  frontend:
#    restart: always
#    image: frontend:latest
#    build: ./frontend
#    deploy:
#      mode: replicated
#      replicas: 1
#    ports:
#      - "127.0.0.1:3000:3000"
#    networks:
#      - caddy_network
#    environment:
#      NODE_ENV: production
#      PORT: "3000"

  caddy:
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    image: caddy/caddy:latest
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    networks:
      - caddy_network

  cadvisor:
    restart: always
    image: gcr.io/cadvisor/cadvisor:latest
    platform: linux/amd64/v3
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - type: bind
      source: /
      target: /rootfs
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/lib/docker/
      target: /var/lib/docker
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /var/run
      target: /var/run
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /sys
      target: /sys
      read_only: true
      bind:
        propagation: rslave
    - type: bind
      source: /dev/disk/
      target: /dev/disk
      read_only: true
      bind:
        propagation: rslave
    ports:
      - "8080:8080"

  postgres:
    restart: always
    image: postgres:17
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - postgres_network
    environment:
      POSTGRES_DB: pgdb
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
